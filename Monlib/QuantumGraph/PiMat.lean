import Monlib.QuantumGraph.Basic
import Monlib.QuantumGraph.Example
import Monlib.LinearAlgebra.TensorProduct.Submodule
import Mathlib.LinearAlgebra.TensorProduct.Finiteness

variable {Œπ : Type*} {p : Œπ ‚Üí Type*} [Fintype Œπ] [DecidableEq Œπ]
  [Œ† i, Fintype (p i)] [Œ† i, DecidableEq (p i)]
  {œÜ : Œ† i, Module.Dual ‚ÑÇ (Matrix (p i) (p i) ‚ÑÇ)}
  [hœÜ : Œ† i, (œÜ i).IsFaithfulPosMap]

open scoped Functional MatrixOrder ComplexOrder TensorProduct Matrix

set_option synthInstance.maxHeartbeats 0 in
private noncomputable abbrev PiMatTensorTo (Œπ : Type*)
  (p : Œπ ‚Üí Type*) [Fintype Œπ] [DecidableEq Œπ]
  [Œ† i, DecidableEq (p i)] [Œ† i, Fintype (p i)] :
  (PiMat ‚ÑÇ Œπ p ‚äó[‚ÑÇ] PiMat ‚ÑÇ Œπ p) ‚âÉ‚ãÜ‚Çê[‚ÑÇ] (i : Œπ √ó Œπ) ‚Üí (Matrix (p i.1) (p i.1) ‚ÑÇ ‚äó[‚ÑÇ] Matrix (p i.2) (p i.2) ‚ÑÇ) :=
StarAlgEquiv.ofAlgEquiv (directSumTensorAlgEquiv ‚ÑÇ
    (fun i ‚Ü¶ Matrix (p i) (p i) ‚ÑÇ) (fun i ‚Ü¶ Matrix (p i) (p i) ‚ÑÇ))
  (Œª x => x.induction_on
    (by simp only [star_zero, map_zero])
    (Œª _ _ => by
      ext
      simp only [Pi.star_apply, TensorProduct.star_tmul,
        directSumTensorAlgEquiv_apply, directSumTensorToFun_apply])
    (Œª _ _ h1 h2 => by simp only [star_add, AlgEquiv.map_add, h1, h2]))

@[simps]
noncomputable def PiMat.transposeStarAlgEquiv
  (Œπ : Type*) (p : Œπ ‚Üí Type*) [Fintype Œπ] [DecidableEq Œπ]
  [Œ† i, DecidableEq (p i)] [Œ† i, Fintype (p i)] :
    PiMat ‚ÑÇ Œπ p ‚âÉ‚ãÜ‚Çê[‚ÑÇ] (PiMat ‚ÑÇ Œπ p)·µê·µí·µñ where
  toFun x := MulOpposite.op (Œª i => (x i)·µÄ)
  invFun x i := (MulOpposite.unop x i)·µÄ
  left_inv _ := rfl
  right_inv _ := rfl
  map_mul' _ _ := by
    simp only [Pi.mul_apply, Matrix.transpose_mul]
    rfl
  map_add' _ _ := rfl
  map_smul' _ _ := by
    simp only [MulOpposite.op_inj, Matrix.transpose_smul]
    rfl
  map_star' _ := rfl

noncomputable abbrev Matrix.toEuclideanStarAlgEquiv
  {n : Type*} [Fintype n] [DecidableEq n] :
  (Matrix n n ‚ÑÇ) ‚âÉ‚ãÜ‚Çê[‚ÑÇ] EuclideanSpace ‚ÑÇ n ‚Üí‚Çó[‚ÑÇ] EuclideanSpace ‚ÑÇ n :=
StarAlgEquiv.ofAlgEquiv
(AlgEquiv.ofLinearEquiv (Matrix.toEuclideanLin)
  (by simp only [toEuclideanLin_one])
  (Œª x y => by
    simp only [Matrix.toEuclideanLin_eq_toLin,
      Matrix.toLin_mul (PiLp.basisFun 2 ‚ÑÇ n) (PiLp.basisFun 2 ‚ÑÇ n)]
    rfl))
(Œª _ => by
  simp only [AlgEquiv.ofLinearEquiv_apply, Matrix.toEuclideanLin_eq_toLin_orthonormal,
    LinearMap.star_eq_adjoint, Matrix.star_eq_conjTranspose,
    Matrix.toLin_conjTranspose])
theorem Matrix.toEuclideanStarAlgEquiv_coe {n : Type*} [Fintype n] [DecidableEq n] :
  ‚áë(Matrix.toEuclideanStarAlgEquiv : Matrix n n ‚ÑÇ ‚âÉ‚ãÜ‚Çê[‚ÑÇ] EuclideanSpace ‚ÑÇ n ‚Üí‚Çó[‚ÑÇ] EuclideanSpace ‚ÑÇ n) =
    Matrix.toEuclideanLin := rfl

set_option maxHeartbeats 500000 in
set_option synthInstance.maxHeartbeats 57020 in
@[simps!]
noncomputable def PiMatTensorProductEquiv
  {Œπ‚ÇÅ Œπ‚ÇÇ : Type*} {p‚ÇÅ : Œπ‚ÇÅ ‚Üí Type*} {p‚ÇÇ : Œπ‚ÇÇ ‚Üí Type*}
  [Fintype Œπ‚ÇÅ] [DecidableEq Œπ‚ÇÅ] [Fintype Œπ‚ÇÇ] [DecidableEq Œπ‚ÇÇ]
  [Œ† i, Fintype (p‚ÇÅ i)] [Œ† i, DecidableEq (p‚ÇÅ i)]
  [Œ† i, Fintype (p‚ÇÇ i)] [Œ† i, DecidableEq (p‚ÇÇ i)] :
    (PiMat ‚ÑÇ Œπ‚ÇÅ p‚ÇÅ) ‚äó[‚ÑÇ] (PiMat ‚ÑÇ Œπ‚ÇÇ p‚ÇÇ) ‚âÉ‚ãÜ‚Çê[‚ÑÇ]
      PiMat ‚ÑÇ (Œπ‚ÇÅ √ó Œπ‚ÇÇ) (fun i : Œπ‚ÇÅ √ó Œπ‚ÇÇ => p‚ÇÅ i.1 √ó p‚ÇÇ i.2) :=
StarAlgEquiv.ofAlgEquiv
  ((directSumTensorAlgEquiv ‚ÑÇ _ _).trans
    (AlgEquiv.piCongrRight (Œª i => tensorToKronecker)))
  (Œª x => by
    ext1
    simp only [Pi.star_apply, TensorProduct.toKronecker_star]
    obtain ‚ü®S, rfl‚ü© := TensorProduct.exists_finset x
    simp only [AlgEquiv.trans_apply, AlgEquiv.piCongrRight_apply, directSumTensorAlgEquiv_apply,
      tensorToKronecker_apply]
    simp only [TensorProduct.star_tmul, directSumTensor_apply, map_sum, Finset.sum_apply, star_sum,
      directSumTensorToFun_apply, Pi.star_apply, TensorProduct.toKronecker_star])

theorem PiMatTensorProductEquiv_tmul_apply
  {Œπ‚ÇÅ Œπ‚ÇÇ : Type*} {p‚ÇÅ : Œπ‚ÇÅ ‚Üí Type*} {p‚ÇÇ : Œπ‚ÇÇ ‚Üí Type*}
  [Fintype Œπ‚ÇÅ] [DecidableEq Œπ‚ÇÅ] [Fintype Œπ‚ÇÇ] [DecidableEq Œπ‚ÇÇ]
  [Œ† i, Fintype (p‚ÇÅ i)] [Œ† i, DecidableEq (p‚ÇÅ i)]
  [Œ† i, Fintype (p‚ÇÇ i)] [Œ† i, DecidableEq (p‚ÇÇ i)]
  (x : PiMat ‚ÑÇ Œπ‚ÇÅ p‚ÇÅ) (y : PiMat ‚ÑÇ Œπ‚ÇÇ p‚ÇÇ) (r : Œπ‚ÇÅ √ó Œπ‚ÇÇ)
  (a b : p‚ÇÅ r.1 √ó p‚ÇÇ r.2) :
    (PiMatTensorProductEquiv (x ‚äó‚Çú[‚ÑÇ] y)) r a b = x r.1 a.1 b.1 * y r.2 a.2 b.2 := by
  simp_rw [PiMatTensorProductEquiv_apply, directSumTensorToFun_apply,
    TensorProduct.toKronecker_apply]
  rfl
open scoped Kronecker
theorem PiMatTensorProductEquiv_tmul
  {Œπ‚ÇÅ Œπ‚ÇÇ : Type*} {p‚ÇÅ : Œπ‚ÇÅ ‚Üí Type*} {p‚ÇÇ : Œπ‚ÇÇ ‚Üí Type*}
  [Fintype Œπ‚ÇÅ] [DecidableEq Œπ‚ÇÅ] [Fintype Œπ‚ÇÇ] [DecidableEq Œπ‚ÇÇ]
  [Œ† i, Fintype (p‚ÇÅ i)] [Œ† i, DecidableEq (p‚ÇÅ i)]
  [Œ† i, Fintype (p‚ÇÇ i)] [Œ† i, DecidableEq (p‚ÇÇ i)]
  (x : PiMat ‚ÑÇ Œπ‚ÇÅ p‚ÇÅ) (y : PiMat ‚ÑÇ Œπ‚ÇÇ p‚ÇÇ) :
    (PiMatTensorProductEquiv (x ‚äó‚Çú[‚ÑÇ] y)) = Œª r : Œπ‚ÇÅ √ó Œπ‚ÇÇ => (x r.1 ‚äó‚Çñ y r.2) := by
  ext; simp only [PiMatTensorProductEquiv_tmul_apply, Matrix.kronecker_apply]; rfl

theorem PiMatTensorProductEquiv_tmul_apply'
  {Œπ‚ÇÅ Œπ‚ÇÇ : Type*} {p‚ÇÅ : Œπ‚ÇÅ ‚Üí Type*} {p‚ÇÇ : Œπ‚ÇÇ ‚Üí Type*}
  [Fintype Œπ‚ÇÅ] [DecidableEq Œπ‚ÇÅ] [Fintype Œπ‚ÇÇ] [DecidableEq Œπ‚ÇÇ]
  [Œ† i, Fintype (p‚ÇÅ i)] [Œ† i, DecidableEq (p‚ÇÅ i)]
  [Œ† i, Fintype (p‚ÇÇ i)] [Œ† i, DecidableEq (p‚ÇÇ i)]
  (x : PiMat ‚ÑÇ Œπ‚ÇÅ p‚ÇÅ) (y : PiMat ‚ÑÇ Œπ‚ÇÇ p‚ÇÇ) (r : Œπ‚ÇÅ √ó Œπ‚ÇÇ)
  (a c : p‚ÇÅ r.1) (b d : p‚ÇÇ r.2) :
    (PiMatTensorProductEquiv (x ‚äó‚Çú[‚ÑÇ] y)) r (a, b) (c, d) = x r.1 a c * y r.2 b d :=
PiMatTensorProductEquiv_tmul_apply _ _ _ _ _

open scoped FiniteDimensional in
noncomputable def ContinuousLinearMap.toLinearMapStarAlgEquiv {ùïú B : Type*} [RCLike ùïú]
  [NormedAddCommGroup B] [InnerProductSpace ùïú B] [FiniteDimensional ùïú B] :
    (B ‚ÜíL[ùïú] B) ‚âÉ‚ãÜ‚Çê[ùïú] (B ‚Üí‚Çó[ùïú] B) :=
StarAlgEquiv.ofAlgEquiv ContinuousLinearMap.toLinearMapAlgEquiv
  (Œª x => by simp only [toLinearMapAlgEquiv_apply]; rfl)

noncomputable abbrev PiMat_toEuclideanLM :
  (PiMat ‚ÑÇ Œπ p) ‚âÉ‚ãÜ‚Çê[‚ÑÇ] (Œ† i, EuclideanSpace ‚ÑÇ (p i) ‚Üí‚Çó[‚ÑÇ] EuclideanSpace ‚ÑÇ (p i)) :=
StarAlgEquiv.piCongrRight (Œª _ => Matrix.toEuclideanStarAlgEquiv)

theorem isIdempotentElem_iff {M : Type*} [Mul M] {p : M} :
  IsIdempotentElem p ‚Üî p * p = p :=
Iff.rfl

@[simps!]
noncomputable abbrev PiMat.traceLinearMap :
    (PiMat ‚ÑÇ Œπ p) ‚Üí‚Çó[‚ÑÇ] ‚ÑÇ :=
Matrix.traceLinearMap _ _ _ ‚àò‚Çó Matrix.blockDiagonal'AlgHom.toLinearMap

set_option maxHeartbeats 0 in
set_option synthInstance.maxHeartbeats 0 in
theorem QuantumGraph.PiMat_existsSubmoduleIsProj {f : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p}
  (hf : QuantumGraph (PiMat ‚ÑÇ Œπ p) f) (t r : ‚Ñù) :
  ‚àÉ u : Œ† i : Œπ √ó Œπ, Submodule ‚ÑÇ (EuclideanSpace ‚ÑÇ (p i.1 √ó p i.2)),
    ‚àÄ i : Œπ √ó Œπ, LinearMap.IsProj (u i)
    (PiMat_toEuclideanLM (PiMatTensorProductEquiv
    ((StarAlgEquiv.lTensor _
      (PiMat.transposeStarAlgEquiv Œπ p).symm) (QuantumSet.Psi t r f))) i) :=
by
  have : ‚àÄ i, IsIdempotentElem
     ((PiMat_toEuclideanLM (PiMatTensorProductEquiv ((StarAlgEquiv.lTensor _ (PiMat.transposeStarAlgEquiv Œπ p).symm) (QuantumSet.Psi t r f)))) i) :=
  by
    rw [‚Üê isIdempotentElem_pi_iff (a := (((PiMat_toEuclideanLM
      (PiMatTensorProductEquiv ((StarAlgEquiv.lTensor _
        (PiMat.transposeStarAlgEquiv Œπ p).symm) (QuantumSet.Psi t r f)))))))]
    simp_rw [IsIdempotentElem.mulEquiv, ‚Üê schurIdempotent_iff_Psi_isIdempotentElem,
      hf.isIdempotentElem]
  simp_rw [isIdempotentElem_iff,  LinearMap.mul_eq_comp, ‚Üê LinearMap.isProj_iff_idempotent] at this
  exact ‚ü®Œª i => (this i).choose, Œª i => (this i).choose_spec‚ü©


noncomputable def QuantumGraph.PiMat_submodule {f : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p}
    (hf : QuantumGraph (PiMat ‚ÑÇ Œπ p) f) (t r : ‚Ñù) :
  Œ† i : Œπ √ó Œπ, Submodule ‚ÑÇ (EuclideanSpace ‚ÑÇ (p i.1 √ó p i.2)) :=
by
  choose u _ using QuantumGraph.PiMat_existsSubmoduleIsProj hf t r
  exact u

set_option maxRecDepth 1000 in
theorem QuantumGraph.PiMat_submoduleIsProj {f : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p}
  (hf : QuantumGraph (PiMat ‚ÑÇ Œπ p) f) (t r : ‚Ñù) (i : Œπ √ó Œπ) :
  LinearMap.IsProj (hf.PiMat_submodule t r i)
  (PiMat_toEuclideanLM (PiMatTensorProductEquiv ((StarAlgEquiv.lTensor _
    (PiMat.transposeStarAlgEquiv Œπ p).symm) (QuantumSet.Psi t r f))) i) :=
QuantumGraph.PiMat_submodule.proof_17 hf t r i

theorem QuantumGraph.PiMat_submoduleIsProj_codRestrict {f : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p}
  (hf : QuantumGraph (PiMat ‚ÑÇ Œπ p) f) (t r : ‚Ñù) (i : Œπ √ó Œπ) :
  (Submodule.subtype _).comp (QuantumGraph.PiMat_submoduleIsProj hf t r i).codRestrict
    = (PiMat_toEuclideanLM (PiMatTensorProductEquiv ((StarAlgEquiv.lTensor _
      (PiMat.transposeStarAlgEquiv Œπ p).symm) (QuantumSet.Psi t r f))) i) :=
rfl

noncomputable def QuantumGraph.dim_of_piMat_submodule {f : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p}
  (hf : QuantumGraph _ f) : ‚Ñï :=
‚àë i : Œπ √ó Œπ, Module.finrank ‚ÑÇ (hf.PiMat_submodule 0 (1 / 2) i)

theorem QuantumGraph.dim_of_piMat_submodule_eq_trace {f : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p}
  (hf : QuantumGraph _ f) :
  QuantumGraph.dim_of_piMat_submodule hf =
    PiMat.traceLinearMap
    (PiMatTensorProductEquiv
    ((StarAlgEquiv.lTensor _ (PiMat.transposeStarAlgEquiv Œπ p).symm) (QuantumSet.Psi 0 (1 / 2) f))) :=
by
  rw [PiMat.traceLinearMap_apply, Matrix.blockDiagonal'AlgHom_apply,
    Matrix.trace_blockDiagonal', dim_of_piMat_submodule]
  simp only [Nat.cast_sum, PiMatTensorProductEquiv_apply]
  congr
  ext i
  rw [‚Üê LinearMap.IsProj.trace (QuantumGraph.PiMat_submoduleIsProj hf 0 (1 / 2) i)]
  simp only [StarAlgEquiv.piCongrRight_apply,
    StarAlgEquiv.trans_apply,
    Matrix.toEuclideanStarAlgEquiv_coe,
    PiMatTensorProductEquiv_apply, EuclideanSpace.trace_eq_matrix_trace',
    Matrix.coe_toEuclideanCLM_eq_toEuclideanLin, LinearEquiv.symm_apply_apply]

set_option synthInstance.maxHeartbeats 0 in
set_option maxHeartbeats 0 in
theorem QuantumGraph.dim_of_piMat_submodule_eq_rank_top_iff
  {f : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p} (hf : QuantumGraph _ f) :
  QuantumGraph.dim_of_piMat_submodule hf = ‚àë i : Œπ √ó Œπ, Fintype.card (p i.1) * Fintype.card (p i.2)
    ‚Üî f = Qam.completeGraph _ _ :=
by
  calc
    QuantumGraph.dim_of_piMat_submodule hf = ‚àë i : Œπ √ó Œπ, Fintype.card (p i.1) * Fintype.card (p i.2)
      ‚Üî ‚àë i : Œπ √ó Œπ, Module.finrank ‚ÑÇ ‚Ü•(hf.PiMat_submodule 0 (1 / 2) i)
        = ‚àë i : Œπ √ó Œπ, Fintype.card (p i.1) * Fintype.card (p i.2) := by rfl
    _ ‚Üî ‚àÄ i, Module.finrank ‚ÑÇ ‚Ü•(hf.PiMat_submodule 0 (1 / 2) i)
      = Fintype.card (p i.1) * Fintype.card (p i.2) := by
        rw [‚Üê Nat.cast_inj (R := ‚ÑÇ)]
        simp only [Nat.cast_sum]
        rw [eq_comm, ‚Üê sub_eq_zero, ‚Üê Finset.sum_sub_distrib]
        rw [Finset.sum_eq_zero_iff_of_nonneg]
        simp_rw [sub_eq_zero, Nat.cast_inj, Finset.mem_univ, true_imp_iff,
          ‚Üê Fintype.card_prod, ‚Üê finrank_euclideanSpace (ùïú := ‚ÑÇ),
          @eq_comm _ _ (Module.finrank ‚ÑÇ (hf.PiMat_submodule 0 (1/2) _))]
        . simp only [Finset.mem_univ, sub_nonneg, true_implies, Nat.cast_le]
          intro i
          calc Module.finrank ‚ÑÇ (‚Ü•(hf.PiMat_submodule 0 (1 / 2) i))
            ‚â§ Module.finrank ‚ÑÇ (EuclideanSpace ‚ÑÇ (p i.1 √ó p i.2)) :=
                Submodule.finrank_le _
            _ = Fintype.card (p i.1) * Fintype.card (p i.2) := by
              simp only [finrank_euclideanSpace, Fintype.card_prod]
    _ ‚Üî
      ‚àÄ i, hf.PiMat_submodule 0 (1 / 2) i = (‚ä§ : Submodule ‚ÑÇ (EuclideanSpace ‚ÑÇ (p i.1 √ó p i.2))) :=
        by
          simp_rw [‚Üê Fintype.card_prod, ‚Üê finrank_euclideanSpace (ùïú := ‚ÑÇ)]
          constructor
          . intro h i
            exact Submodule.eq_top_of_finrank_eq (h i)
          . intro h i
            rw [h]
            simp only [finrank_top]
    _ ‚Üî
      ‚àÄ i, (PiMat_toEuclideanLM (PiMatTensorProductEquiv ((StarAlgEquiv.lTensor _
    (PiMat.transposeStarAlgEquiv Œπ p).symm) (QuantumSet.Psi 0 (1/2) f))) i)
      = LinearMap.id := by
        simp_rw [LinearMap.IsProj.codRestrict_eq_dim_iff (hf.PiMat_submoduleIsProj 0 (1/2) _),
          LinearMap.IsProj.subtype_comp_codRestrict]
    _
      ‚Üî (PiMat_toEuclideanLM (PiMatTensorProductEquiv ((StarAlgEquiv.lTensor _
    (PiMat.transposeStarAlgEquiv Œπ p).symm) (QuantumSet.Psi 0 (1/2) f))))
      = 1 := by
        rw [funext_iff]; exact Iff.rfl
    _ ‚Üî f = Qam.completeGraph _ _ :=
      by
        rw [eq_comm]
        simp_rw [StarAlgEquiv.eq_apply_iff_symm_eq, map_one]
        rw [‚Üê LinearEquiv.symm_apply_eq, QuantumSet.Psi_symm_one, eq_comm]

theorem QuantumGraph.CompleteGraph_dim_of_piMat_submodule :
  QuantumGraph.dim_of_piMat_submodule
    (‚ü®Qam.Nontracial.CompleteGraph.qam‚ü© : QuantumGraph _ (Qam.completeGraph (PiMat ‚ÑÇ Œπ p) (PiMat ‚ÑÇ Œπ p)))
      = ‚àë i : Œπ √ó Œπ, Fintype.card (p i.1) * Fintype.card (p i.2) :=
by rw [QuantumGraph.dim_of_piMat_submodule_eq_rank_top_iff]

open scoped InnerProductSpace
theorem Algebra.linearMap_adjoint_eq_dual :
  LinearMap.adjoint (Algebra.linearMap ‚ÑÇ (PiMat ‚ÑÇ Œπ p))
    = Module.Dual.pi œÜ :=
by
  rw [‚Üê Module.Dual.pi.IsFaithfulPosMap.adjoint_eq, LinearMap.adjoint_adjoint]

theorem exists_dim_of_piMat_submodule_ne_inner_one_map_one_of_IsFaithfulState
  (hœÜ‚ÇÇ : (Module.Dual.pi œÜ).IsUnital)
  (hB : 1 < Module.finrank ‚ÑÇ (PiMat ‚ÑÇ Œπ p)) :
  ‚àÉ (A : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p) (hA : QuantumGraph (PiMat ‚ÑÇ Œπ p) A),
    QuantumGraph.NumOfEdges A ‚â† QuantumGraph.dim_of_piMat_submodule hA :=
by
  use Qam.completeGraph _ _, ‚ü®Qam.Nontracial.CompleteGraph.qam‚ü©
  rw [QuantumGraph.CompleteGraph_dim_of_piMat_submodule, Qam.completeGraph,
    QuantumGraph.NumOfEdges]
  simp only [LinearMap.coe_mk, AddHom.coe_mk, ContinuousLinearMap.coe_coe,
    rankOne_apply_apply_toFun, ne_eq]
  have : ‚ü™(1 : PiMat ‚ÑÇ Œπ p), 1‚ü´_‚ÑÇ = 1 :=
  by
    simp_rw [Coalgebra.inner_eq_counit', Coalgebra.counit_eq_unit_adjoint]
    rw [‚Üê hœÜ‚ÇÇ]
    congr
    rw [‚Üê Algebra.linearMap_adjoint_eq_dual]
    congr; ext; rfl
  simp_rw [ne_eq, this, one_smul, this]
  rw [‚Üê Nat.cast_one, Nat.cast_inj]
  simp [Module.finrank_pi_fintype, Module.finrank_matrix, ‚Üê pow_two] at hB
  have :=
    calc ‚àë i : Œπ √ó Œπ, Fintype.card (p i.1) * Fintype.card (p i.2)
      = ‚àë i : Œπ, ‚àë j : Œπ, Fintype.card (p i) * Fintype.card (p j) :=
        by simp_rw [Finset.sum_product_univ]
      _ = (‚àë i : Œπ, Fintype.card (p i)) ^ 2 :=
        by simp_rw [‚Üê Finset.mul_sum, ‚Üê Finset.sum_mul, pow_two]
  rw [this, eq_comm, ‚Üê one_pow 2, sq_eq_sq (by simp) (by simp)]
  contrapose! hB
  calc ‚àë x : Œπ, Fintype.card (p x) ^ 2 ‚â§ (‚àë i : Œπ, Fintype.card (p i)) ^ 2 :=
      Finset.sum_sq_le_sq_sum_of_nonneg (by simp)
    _ = 1 := by rw [hB, one_pow]

set_option maxHeartbeats 1000000 in
set_option synthInstance.maxHeartbeats 0 in
theorem QuantumGraph.Real.PiMat_isOrthogonalProjection
  {A : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p} (hA : QuantumGraph.Real (PiMat ‚ÑÇ Œπ p) A)
  (i : Œπ √ó Œπ) :
  ContinuousLinearMap.IsOrthogonalProjection
  (LinearMap.toContinuousLinearMap
    (PiMat_toEuclideanLM (PiMatTensorProductEquiv ((StarAlgEquiv.lTensor _
    (PiMat.transposeStarAlgEquiv Œπ p).symm) (QuantumSet.Psi 0 (1 / 2) A))) i)) :=
by
  have this' : k (PiMat ‚ÑÇ Œπ p) = 0 := by rfl
  rw [‚Üê zero_add (1 / 2 : ‚Ñù)]
  nth_rw 2 [‚Üê this']
  simp only [LinearMap.isOrthogonalProjection_iff, IsIdempotentElem,
    ‚Üê Pi.mul_apply _ _ i, ‚Üê map_mul,
    IsSelfAdjoint, ‚Üê Pi.star_apply _ i, ‚Üê map_star]
  simp only [(quantumGraphReal_iff_Psi_isIdempotentElem_and_isSelfAdjoint.mp hA).1.eq,
    (quantumGraphReal_iff_Psi_isIdempotentElem_and_isSelfAdjoint.mp hA).2.star_eq, and_self]

set_option synthInstance.maxHeartbeats 0 in
noncomputable def QuantumGraph.Real.PiMat_submodule {A : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p}
  (hA : QuantumGraph.Real (PiMat ‚ÑÇ Œπ p) A) :
  Œ† i : Œπ √ó Œπ, Submodule ‚ÑÇ (EuclideanSpace ‚ÑÇ (p i.1 √ó p i.2)) :=
by
  intro i
  choose y _ using
    (orthogonal_projection_iff.mpr
    (And.comm.mp
    (ContinuousLinearMap.isOrthogonalProjection_iff'.mp
      (QuantumGraph.Real.PiMat_isOrthogonalProjection hA i))))
  exact y

set_option maxHeartbeats 1000000 in
set_option synthInstance.maxHeartbeats 0 in
set_option maxRecDepth 1000 in
theorem QuantumGraph.Real.PiMat_submoduleOrthogonalProjection
  {A : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p}
  (hA : QuantumGraph.Real (PiMat ‚ÑÇ Œπ p) A) (i : Œπ √ó Œπ) :
  (orthogonalProjection' (hA.PiMat_submodule i)) =
    (LinearMap.toContinuousLinearMap
    ((PiMat_toEuclideanLM (PiMatTensorProductEquiv
    ((StarAlgEquiv.lTensor (PiMat ‚ÑÇ Œπ p) (PiMat.transposeStarAlgEquiv Œπ p).symm)
    (QuantumSet.Psi 0 (1/2) A))) i))) :=
QuantumGraph.Real.PiMat_submodule.proof_28 hA i

set_option synthInstance.maxHeartbeats 0 in
noncomputable def QuantumGraph.Real.PiMat_orthonormalBasis {A : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p}
  (hA : QuantumGraph.Real (PiMat ‚ÑÇ Œπ p) A) (i : Œπ √ó Œπ) :
  OrthonormalBasis (Fin (Module.finrank ‚ÑÇ (hA.PiMat_submodule i))) ‚ÑÇ (hA.PiMat_submodule i) :=
stdOrthonormalBasis ‚ÑÇ (hA.PiMat_submodule i)

set_option synthInstance.maxHeartbeats 0 in
theorem EuclideanSpace.prod_exists_finset {n m : Type*} [Fintype n] [DecidableEq n]
  [Fintype m] [DecidableEq m] (x : EuclideanSpace ‚ÑÇ (n √ó m)) :
  ‚àÉ S : Finset ((EuclideanSpace ‚ÑÇ n) √ó EuclideanSpace ‚ÑÇ m),
    x = ‚àë s in S, euclideanSpaceTensor' (R := ‚ÑÇ) (s.1 ‚äó‚Çú[‚ÑÇ] s.2) :=
by
  obtain ‚ü®S, hS‚ü© := TensorProduct.exists_finset ((euclideanSpaceTensor' (R:=‚ÑÇ)).symm x)
  use S
  apply_fun (euclideanSpaceTensor' (R:=‚ÑÇ)).symm using LinearEquiv.injective _
  simp only [map_sum, LinearIsometryEquiv.symm_apply_apply, hS]

theorem QuantumSet.PiMat_n :
  n (PiMat ‚ÑÇ Œπ p) = ((i : Œπ) √ó (p i √ó p i)) :=
rfl

open Kronecker

@[simp]
theorem Matrix.ite_kronecker {Œ± n m p q : Type*} [MulZeroClass Œ±] (x‚ÇÅ : Matrix n m Œ±)
  (x‚ÇÇ : Matrix p q Œ±) (P : Prop) [Decidable P] :
  (if P then x‚ÇÅ else 0) ‚äó‚Çñ x‚ÇÇ = if P then x‚ÇÅ ‚äó‚Çñ x‚ÇÇ else 0 :=
by
  split
  next h => simp_all only
  next h => simp_all only [zero_mul, implies_true, kroneckerMap_zero_left]
@[simp]
theorem Matrix.dite_kronecker {Œ± n m p q : Type*} [MulZeroClass Œ±]
  (P : Prop) [Decidable P]
  (x‚ÇÅ : P ‚Üí Matrix n m Œ±) (x‚ÇÇ : Matrix p q Œ±) :
  (dite P (Œª p => x‚ÇÅ p) (Œª _ => 0)) ‚äó‚Çñ x‚ÇÇ = dite P (Œª p => x‚ÇÅ p ‚äó‚Çñ x‚ÇÇ) (Œª _ => 0) :=
by
  split
  next h => simp_all only
  next h => simp_all only [zero_mul, implies_true, kroneckerMap_zero_left]

@[simp]
theorem Matrix.kronecker_ite {Œ± n m p q : Type*} [MulZeroClass Œ±] (x‚ÇÅ : Matrix n m Œ±)
  (x‚ÇÇ : Matrix p q Œ±) (P : Prop) [Decidable P] :
  x‚ÇÅ ‚äó‚Çñ (if P then x‚ÇÇ else 0) = if P then x‚ÇÅ ‚äó‚Çñ x‚ÇÇ else 0 :=
by
  split
  next h => simp_all only
  next h => simp_all only [mul_zero, implies_true, kroneckerMap_zero_right]
@[simp]
theorem Matrix.kronecker_dite {Œ± n m p q : Type*} [MulZeroClass Œ±]
  (x‚ÇÅ : Matrix n m Œ±) (P : Prop) [Decidable P] (x‚ÇÇ : P ‚Üí Matrix p q Œ±) :
  x‚ÇÅ ‚äó‚Çñ (dite P (Œª p => x‚ÇÇ p) (Œª _ => 0)) = dite P (Œª p => x‚ÇÅ ‚äó‚Çñ x‚ÇÇ p) (Œª _ => 0) :=
by
  split
  next h => simp_all only
  next h => simp_all only [mul_zero, implies_true, kroneckerMap_zero_right]

theorem Matrix.vecMulVec_kronecker_vecMulVec {Œ± n m p q : Type*} [CommSemiring Œ±]
    (x : n ‚Üí Œ±) (y : m ‚Üí Œ±) (z : p ‚Üí Œ±) (w : q ‚Üí Œ±) :
  (vecMulVec x y) ‚äó‚Çñ (vecMulVec z w) =
    vecMulVec (reshape (vecMulVec x z)) (reshape (vecMulVec y w)) :=
by
  ext
  simp only [kroneckerMap_apply, zero_apply, vecMulVec_apply, reshape_apply]
  ring_nf

@[simp]
theorem Matrix.vecMulVec_toEuclideanLin {n m : Type*} [Fintype n] [DecidableEq n]
  [Fintype m] [DecidableEq m] (x : EuclideanSpace ‚ÑÇ n) (y : EuclideanSpace ‚ÑÇ m) :
  toEuclideanLin (vecMulVec x y) = rankOne ‚ÑÇ x (star y) :=
by
  apply_fun Matrix.toEuclideanLin.symm using LinearEquiv.injective _
  simp only [LinearEquiv.symm_apply_apply, rankOne.EuclideanSpace.toEuclideanLin_symm]
  simp only [conjTranspose_col, star_star]
  simp only [‚Üê vecMulVec_eq]

open Matrix in
theorem EuclideanSpaceTensor_apply_eq_reshape_vecMulVec {n m : Type*} [Fintype n]
  [DecidableEq n] [Fintype m] [DecidableEq m]
  (x : EuclideanSpace ‚ÑÇ n) (y : EuclideanSpace ‚ÑÇ m) :
  euclideanSpaceTensor' (R:=‚ÑÇ) (x ‚äó‚Çú[‚ÑÇ] y) = reshape (vecMulVec x y) :=
by
  ext1
  simp only [euclideanSpaceTensor'_apply, reshape_apply, vecMulVec_apply]

theorem Matrix.vecMulVec_conj {Œ± n m : Type*} [CommSemiring Œ±] [StarMul Œ±] (x : n ‚Üí Œ±) (y : m ‚Üí Œ±) :
  (vecMulVec x y)·¥¥·µÄ = vecMulVec (star x) (star y) :=
by
  ext
  simp only [conj_apply, vecMulVec_apply, Pi.star_apply, star_mul']

noncomputable def TensorProduct.chooseFinset {R M N : Type*} [CommSemiring R]
  [AddCommMonoid M] [AddCommMonoid N] [Module R M] [Module R N]
  (x : TensorProduct R M N) :
    Finset (M √ó N) :=
by
  choose S _ using TensorProduct.exists_finset x
  exact S
theorem TensorProduct.chooseFinset_spec {R M N : Type*} [CommSemiring R]
  [AddCommMonoid M] [AddCommMonoid N] [Module R M] [Module R N]
  (x : TensorProduct R M N) :
  x = ‚àë s in (TensorProduct.chooseFinset x), s.1 ‚äó‚Çú s.2 :=
TensorProduct.chooseFinset.proof_1 x

-- changed from choosing some `Finset (_ √ó _)` like above to the following
noncomputable def EuclideanSpace.prod_choose {n m : Type*} [Fintype n] [DecidableEq n]
  [Fintype m] [DecidableEq m] (x : EuclideanSpace ‚ÑÇ (n √ó m)) :
  (n √ó m) ‚Üí ((EuclideanSpace ‚ÑÇ n) √ó EuclideanSpace ‚ÑÇ m) :=
  let p‚ÇÅ := (EuclideanSpace.basisFun n ‚ÑÇ)
  let p‚ÇÇ := (EuclideanSpace.basisFun m ‚ÑÇ)
  let a := Œª i : n √ó m => (((p‚ÇÅ.tensorProduct p‚ÇÇ).repr ((euclideanSpaceTensor' (R := ‚ÑÇ)).symm x)) i ‚Ä¢ p‚ÇÅ i.1)
  (Œª (i : n √ó m) => (a i, p‚ÇÇ i.2))

theorem EuclideanSpace.sum_apply {n : Type*} [Fintype n] [DecidableEq n] {ùïú : Type*} [RCLike ùïú]
  {Œπ : Type*} (s : Finset Œπ)
  (x : Œπ ‚Üí EuclideanSpace ùïú n) (j : n) :
  (‚àë i : Œπ in s, x i) j = ‚àë i : Œπ in s, (x i j) :=
Finset.sum_apply _ _ _

theorem Basis.tensorProduct_repr_tmul_apply' {R M N Œπ Œ∫ : Type*} [CommSemiring R]
  [AddCommMonoid M] [Module R M] [AddCommMonoid N] [Module R N] (b : Basis Œπ R M)
  (c : Basis Œ∫ R N) (m : M) (n : N) (i : Œπ √ó Œ∫) :
  ((b.tensorProduct c).repr (m ‚äó‚Çú[R] n)) i = (c.repr n) i.2 * (b.repr m) i.1 :=
Basis.tensorProduct_repr_tmul_apply _ _ _ _ _ _

-- theorem PiLp.ext_iff {p : ENNReal} {Œπ : Type*} {Œ± : Œπ ‚Üí Type*} {x : PiLp p Œ±}
--   {y : PiLp p Œ±} :
--   x = y ‚Üî (‚àÄ (i : Œπ), x i = y i) :=
-- by simp [‚Üê funext_iff]

set_option synthInstance.maxHeartbeats 0 in
set_option maxHeartbeats 0 in
theorem EuclideanSpace.prod_choose_spec {n m : Type*} [Fintype n] [DecidableEq n]
  [Fintype m] [DecidableEq m] (x : EuclideanSpace ‚ÑÇ (n √ó m)) :
  x = ‚àë s : n √ó m, euclideanSpaceTensor' (R:=‚ÑÇ) ((x.prod_choose s).1 ‚äó‚Çú (x.prod_choose s).2) :=
by
  have := TensorProduct.of_basis_eq_span ((euclideanSpaceTensor' (R := ‚ÑÇ)).symm x) (EuclideanSpace.basisFun n ‚ÑÇ).toBasis (EuclideanSpace.basisFun m ‚ÑÇ).toBasis
  apply_fun (euclideanSpaceTensor' (R := ‚ÑÇ)).symm using LinearIsometryEquiv.injective _
  simp only [map_sum, LinearIsometryEquiv.symm_apply_apply]
  rw [this, ‚Üê Finset.sum_product']
  simp only [Finset.univ_product_univ, ‚Üê TensorProduct.tmul_smul]
  simp only [‚Üê TensorProduct.smul_tmul]
  let p‚ÇÅ := (EuclideanSpace.basisFun n ‚ÑÇ).toBasis
  let p‚ÇÇ := (EuclideanSpace.basisFun m ‚ÑÇ).toBasis
  let a := Œª i : n √ó m => (((p‚ÇÅ.tensorProduct p‚ÇÇ).repr ((euclideanSpaceTensor' (R := ‚ÑÇ)).symm x)) i ‚Ä¢ p‚ÇÅ i.1)
  have ha : ‚àÄ i, a i = (((p‚ÇÅ.tensorProduct p‚ÇÇ).repr ((euclideanSpaceTensor' (R := ‚ÑÇ)).symm x)) i ‚Ä¢ p‚ÇÅ i.1) := Œª i => rfl
  simp_rw [‚Üê ha]
  rfl

set_option synthInstance.maxHeartbeats 0 in
set_option maxHeartbeats 0 in
theorem QuantumGraph.Real.PiMat_eq {A : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p}
  (hA : QuantumGraph.Real (PiMat ‚ÑÇ Œπ p) A) :
  let S : (i : Œπ √ó Œπ) ‚Üí
    (j : (Fin (Module.finrank ‚ÑÇ (hA.PiMat_submodule i))))
      ‚Üí (((p i.1) √ó (p i.2)) ‚Üí (((EuclideanSpace ‚ÑÇ (p i.1)) √ó (EuclideanSpace ‚ÑÇ (p i.2)))))
    := Œª i j => (hA.PiMat_orthonormalBasis i j : EuclideanSpace ‚ÑÇ _).prod_choose
  A = ‚àë i : Œπ √ó Œπ, ‚àë j, ‚àë s : (p i.1 √ó p i.2), ‚àë l : (p i.1 √ó p i.2),
    --  in S i j, ‚àë p in S i j,
    rankOne ‚ÑÇ (Matrix.includeBlock
      (Matrix.vecMulVec (S i j s).1 (star (S i j l).1)))
      (modAut (- (1 / 2)) (Matrix.includeBlock
        ((Matrix.vecMulVec (S i j s).2 (star (S i j l).2))·¥¥·µÄ))) :=
by
  intro S
  have hS : ‚àÄ (i : Œπ √ó Œπ) j, (hA.PiMat_orthonormalBasis i j)
     = ‚àë t, euclideanSpaceTensor' (R:=‚ÑÇ) ((S i j t).1 ‚äó‚Çú[‚ÑÇ] (S i j t).2) :=
  Œª i j => EuclideanSpace.prod_choose_spec _
  apply_fun (QuantumSet.Psi 0 (1/2)) using LinearEquiv.injective _
  apply_fun
    (StarAlgEquiv.lTensor (PiMat ‚ÑÇ Œπ p) (PiMat.transposeStarAlgEquiv Œπ p).symm).trans
    (PiMatTensorProductEquiv.trans PiMat_toEuclideanLM)
  simp only [StarAlgEquiv.trans_apply]
  ext1 i
  apply_fun LinearMap.toContinuousLinearMap using LinearEquiv.injective _
  rw [‚Üê QuantumGraph.Real.PiMat_submoduleOrthogonalProjection hA i,
    OrthonormalBasis.orthogonalProjection'_eq_sum_rankOne (hA.PiMat_orthonormalBasis i)]
  simp only [ContinuousLinearMap.coe_sum, map_sum,
    QuantumSet.Psi_apply, QuantumSet.Psi_toFun_apply,
    StarAlgEquiv.lTensor_tmul,
    PiMat_toEuclideanLM, PiMatTensorProductEquiv_apply]
  simp only [starAlgebra.modAut_zero, Matrix.conjTranspose_col, AlgEquiv.one_apply, one_div,
    starAlgebra.modAut_star, Finset.sum_apply, StarAlgEquiv.piCongrRight_apply,
    PiMatTensorProductEquiv_apply, StarAlgEquiv.ofAlgEquiv_coe, AlgEquiv.ofLinearEquiv_apply,
    Fintype.sum_prod_type, map_sum, directSumTensorToFun_apply,
    PiMat.transposeStarAlgEquiv_symm_apply,
    MulOpposite.unop_op]
  simp only [TensorProduct.toKronecker_apply, Matrix.toEuclideanLin_apply']
  simp only [QuantumSet.modAut_apply_modAut, add_neg_cancel, starAlgebra.modAut_zero]
  simp only [Matrix.includeBlock_conjTranspose, Matrix.conj_conjTranspose, Matrix.transpose_apply]
  simp_rw [hS, AlgEquiv.one_apply, Matrix.includeBlock_apply]
  simp only [ContinuousLinearMap.sum_apply, map_sum, Matrix.dite_kronecker,
    Matrix.kronecker_dite, apply_dite, Matrix.transpose_zero, map_zero,
    Matrix.transpose_transpose, Matrix.kronecker_zero]
  simp only [Finset.sum_dite_irrel, Finset.sum_const_zero,
    Finset.sum_dite_eq', Finset.sum_dite_eq,
    Finset.mem_univ, if_true]
  simp only [LinearMap.coeFn_sum, Finset.sum_apply, eq_mp_eq_cast, cast_eq,
    Matrix.transpose_transpose, Matrix.vecMulVec_kronecker_vecMulVec,
    Matrix.vecMulVec_toEuclideanLin, EuclideanSpaceTensor_apply_eq_reshape_vecMulVec]
  simp only [Matrix.reshape_aux_star (R := ‚ÑÇ), Matrix.vecMulVec_conj, star_star]
  congr 1
  ext1
  rw [Finset.sum_comm]
  simp only [Finset.sum_product_univ, Finset.univ_product_univ]
  rfl

section deltaForm
variable {d : ‚ÑÇ} [Nonempty Œπ] [hœÜ‚ÇÇ : Fact (‚àÄ i, (œÜ i).matrix‚Åª¬π.trace = d)]
  [Œ† i, Nontrivial (p i)]

theorem QuantumGraph.trivialGraph :
  QuantumGraph _ (Qam.trivialGraph (PiMat ‚ÑÇ Œπ p)) :=
‚ü®Qam.Nontracial.TrivialGraph.qam‚ü©

omit [Fintype Œπ] [DecidableEq Œπ]
  [Nonempty Œπ] [‚àÄ (i : Œπ), Nontrivial (p i)] in
theorem PiMat.piAlgEquiv_trace_apply
  (f : (i : Œπ) ‚Üí (Matrix (p i) (p i) ‚ÑÇ ‚âÉ‚Çê[‚ÑÇ] Matrix (p i) (p i) ‚ÑÇ))
  (x : PiMat ‚ÑÇ Œπ p) (a : Œπ) :
  ((AlgEquiv.piCongrRight f x) a).trace = (x a).trace :=
by
  calc (((AlgEquiv.piCongrRight f) x) a).trace
      = ((f a) (x a)).trace := rfl
    _ = (x a).trace := AlgEquiv.apply_matrix_trace _ _
omit [DecidableEq Œπ]
  [Nonempty Œπ] [‚àÄ (i : Œπ), Nontrivial (p i)] in
theorem PiMat.modAut_trace_apply (r : ‚Ñù) (x : PiMat ‚ÑÇ Œπ p) (a : Œπ) :
  (modAut r x a).trace = (x a).trace :=
PiMat.piAlgEquiv_trace_apply _ _ _

omit [Nonempty Œπ] [‚àÄ (i : Œπ), Nontrivial (p i)] in
theorem PiMat.orthonormalBasis_trace (a : n (PiMat ‚ÑÇ Œπ p)) (i : Œπ) :
  (QuantumSet.onb (A := (PiMat ‚ÑÇ Œπ p)) a i).trace =
    if a.1 = i then (hœÜ a.1).matrixIsPosDef.rpow (-(1 / 2)) a.2.2 a.2.1 else 0 :=
by
  calc (QuantumSet.onb (A := (PiMat ‚ÑÇ Œπ p)) a i).trace
      = ‚àë j, QuantumSet.onb (A := PiMat ‚ÑÇ Œπ p) a i j j := rfl
    _ = ‚àë j, (Module.Dual.pi.IsFaithfulPosMap.orthonormalBasis hœÜ) a i j j := rfl
    _ = ‚àë j, Matrix.includeBlock (Matrix.stdBasisMatrix a.2.1 a.2.2 1
      * (hœÜ a.1).matrixIsPosDef.rpow (-(1 / 2))) i j j
      := by simp only [Module.Dual.pi.IsFaithfulPosMap.orthonormalBasis_apply]
    _ = if a.1 = i then (hœÜ a.1).matrixIsPosDef.rpow (-(1 / 2)) a.2.2 a.2.1 else 0 :=
      by
        split
        next h =>
          subst h
          simp only [Matrix.includeBlock_apply, dif_pos]
          simp only [one_div, eq_mp_eq_cast, cast_eq]
          simp only [‚Üê Matrix.trace_iff, Matrix.stdBasisMatrix_hMul_trace]
        next h =>
          simp_all only [one_div, Matrix.includeBlock_apply, h, dif_neg]
          simp only [‚ÜìreduceDIte, Matrix.zero_apply, Finset.sum_const_zero]

open QuantumSet in
set_option synthInstance.maxHeartbeats 0 in
theorem QuantumGraph.trivialGraph_dim_of_piMat_submodule :
  (QuantumGraph.trivialGraph : QuantumGraph _ (Qam.trivialGraph (PiMat ‚ÑÇ Œπ p))).dim_of_piMat_submodule
    = Fintype.card Œπ :=
by
  rw [‚Üê Nat.cast_inj (R := ‚ÑÇ)]
  rw [QuantumGraph.dim_of_piMat_submodule_eq_trace, Qam.trivialGraph_eq]
  simp_rw [map_smul]
  rw [‚Üê rankOne.sum_orthonormalBasis_eq_id_lm (QuantumSet.onb)]
  simp only [map_sum, Psi_apply, Psi_toFun_apply, StarAlgEquiv.lTensor_tmul,
    ]
  simp only [starAlgebra.modAut_zero, AlgEquiv.one_apply, one_div, starAlgebra.modAut_star,
    LinearMap.coe_comp, Function.comp_apply, AlgHom.toLinearMap_apply, Matrix.traceLinearMap_apply,
    smul_eq_mul]
  simp only [Matrix.blockDiagonal'AlgHom_apply, Matrix.trace_blockDiagonal']
  simp only [PiMatTensorProductEquiv_tmul, Matrix.trace_kronecker,
    PiMat.transposeStarAlgEquiv_symm_apply, MulOpposite.unop_op]
  simp only [Matrix.trace_transpose (R:=‚ÑÇ), AlgEquiv.apply_matrix_trace,
    PiMat.orthonormalBasis_trace, PiMat.modAut_trace_apply]
  simp only [Pi.star_apply, Matrix.star_eq_conjTranspose, Matrix.trace_conjTranspose,
    PiMat.orthonormalBasis_trace]
  simp only [ite_mul, zero_mul, star_ite, star_zero, star_one, mul_ite, mul_zero]
  simp only [Finset.sum_product_univ, Finset.sum_ite_eq, Finset.mem_univ, if_true]
  simp only [‚Üê Matrix.conjTranspose_apply, (Matrix.PosDef.rpow.isPosDef _ _).1.eq]
  simp only [QuantumSet.n, Finset.sum_sigma_univ, Finset.sum_product_univ]
  calc
    (QuantumSetDeltaForm.delta (PiMat ‚ÑÇ Œπ p))‚Åª¬π *
      ‚àë x, ‚àë x_1, ‚àë x_2, (hœÜ x).matrixIsPosDef.rpow (-(1 / 2)) x_2 x_1
        * (hœÜ x).matrixIsPosDef.rpow (-(1 / 2)) x_1 x_2
    = (QuantumSetDeltaForm.delta (PiMat ‚ÑÇ Œπ p))‚Åª¬π *
      ‚àë x, ‚àë x_1, ‚àë x_2, (hœÜ x).matrixIsPosDef.rpow (-(1 / 2)) x_1 x_2
        * (hœÜ x).matrixIsPosDef.rpow (-(1 / 2)) x_2 x_1 := by simp only [mul_comm]
  _ = (QuantumSetDeltaForm.delta (PiMat ‚ÑÇ Œπ p))‚Åª¬π *
      ‚àë x, ‚àë x_1, ((hœÜ x).matrixIsPosDef.rpow (-(1 / 2)) * (hœÜ x).matrixIsPosDef.rpow (-(1 / 2))) x_1 x_1 := by simp only [‚Üê Matrix.mul_apply]
  _ = (QuantumSetDeltaForm.delta (PiMat ‚ÑÇ Œπ p))‚Åª¬π *
        ‚àë x, (œÜ x).matrix‚Åª¬π.trace := by
      simp only [Matrix.PosDef.rpow_mul_rpow, Matrix.trace_iff]
      ring_nf
      simp only [Matrix.PosDef.rpow_neg_one_eq_inv_self]
  _ = (QuantumSetDeltaForm.delta (PiMat ‚ÑÇ Œπ p))‚Åª¬π *
    ‚àë _ : Œπ, (QuantumSetDeltaForm.delta (PiMat ‚ÑÇ Œπ p)) := by simp only [hœÜ‚ÇÇ.out]; rfl
  _ = Fintype.card Œπ := by
    rw [Finset.sum_const, mul_smul_comm, inv_mul_cancel‚ÇÄ (ne_of_gt QuantumSetDeltaForm.delta_pos)]
    rw [nsmul_eq_mul, mul_one]
    rfl

end deltaForm

theorem StarAlgEquiv.piCongrRight_symm {R Œπ : Type*} {A‚ÇÅ A‚ÇÇ : Œπ ‚Üí Type*}
  [(i : Œπ) ‚Üí Add (A‚ÇÅ i)] [(i : Œπ) ‚Üí Add (A‚ÇÇ i)] [(i : Œπ) ‚Üí Mul (A‚ÇÅ i)] [(i : Œπ) ‚Üí Mul (A‚ÇÇ i)]
  [(i : Œπ) ‚Üí Star (A‚ÇÅ i)] [(i : Œπ) ‚Üí Star (A‚ÇÇ i)] [(i : Œπ) ‚Üí SMul R (A‚ÇÅ i)] [(i : Œπ) ‚Üí SMul R (A‚ÇÇ i)]
  (e : (i : Œπ) ‚Üí A‚ÇÅ i ‚âÉ‚ãÜ‚Çê[R] A‚ÇÇ i) :
  (StarAlgEquiv.piCongrRight e).symm = StarAlgEquiv.piCongrRight (Œª i => (e i).symm) :=
rfl

theorem Matrix.k {n : Type*} [Fintype n] [DecidableEq n]
  {œÜ : Module.Dual ‚ÑÇ (Matrix n n ‚ÑÇ)} [œÜ.IsFaithfulPosMap] :
  k (Matrix n n ‚ÑÇ) = 0 :=
rfl

theorem unitary.mul_inv_eq_iff {A : Type*} [Monoid A] [StarMul A] (U : ‚Ü•(unitary A))
    (x : A) (y : A) : x * (U‚Åª¬π : unitary A) = y ‚Üî x = y * U :=
  by
    rw [unitary.inj_hMul (U : unitary A), mul_assoc]
    rw [‚Üê unitary.star_eq_inv]
    simp only [coe_star, SetLike.coe_mem, star_mul_self_of_mem, mul_one]

noncomputable abbrev piInnerAut (U : (i : Œπ) ‚Üí Matrix.unitaryGroup (p i) ‚ÑÇ) :
  PiMat ‚ÑÇ Œπ p ‚âÉ‚ãÜ‚Çê[‚ÑÇ] PiMat ‚ÑÇ Œπ p :=
(StarAlgEquiv.piCongrRight (Œª i => Matrix.innerAutStarAlg (U i)))

omit hœÜ in
theorem piInnerAut_apply_dualMatrix_iff' {U : (i : Œπ) ‚Üí Matrix.unitaryGroup (p i) ‚ÑÇ} :
  piInnerAut U (Module.Dual.pi.matrixBlock œÜ) = Module.Dual.pi.matrixBlock œÜ ‚Üî
  ‚àÄ i, Matrix.innerAutStarAlg (U i) (œÜ i).matrix = (œÜ i).matrix :=
by
  simp only [funext_iff, StarAlgEquiv.piCongrRight_apply,
    Module.Dual.pi.matrixBlock_apply]

omit hœÜ in
theorem piInnerAut_apply_dualMatrix_iff {U : (i : Œπ) ‚Üí Matrix.unitaryGroup (p i) ‚ÑÇ} :
  piInnerAut U (Module.Dual.pi.matrixBlock œÜ) = Module.Dual.pi.matrixBlock œÜ ‚Üî
    ‚àÄ (a : Œπ), (U a) * (œÜ a).matrix = (œÜ a).matrix * (U a) :=
by
  simp only [piInnerAut_apply_dualMatrix_iff', Matrix.innerAutStarAlg_apply']
  simp_rw [unitary.mul_inv_eq_iff]

example
  {f : PiMat ‚ÑÇ Œπ p ‚âÉ‚ãÜ‚Çê[‚ÑÇ] PiMat ‚ÑÇ Œπ p} :
  @Isometry (PiMat ‚ÑÇ Œπ p) (PiMat ‚ÑÇ Œπ p)
      (@EMetricSpace.toPseudoEMetricSpace (PiMat ‚ÑÇ Œπ p)
        (@MetricSpace.toEMetricSpace (PiMat ‚ÑÇ Œπ p) InnerProductAlgebra.toMetricSpace))
      (@EMetricSpace.toPseudoEMetricSpace (PiMat ‚ÑÇ Œπ p)
        (@MetricSpace.toEMetricSpace (PiMat ‚ÑÇ Œπ p) InnerProductAlgebra.toMetricSpace))
      f ‚Üî
    LinearMap.adjoint f.toLinearMap = f.symm.toLinearMap
  :=
QuantumSet.starAlgEquiv_isometry_iff_adjoint_eq_symm

theorem innerAutStarAlg_adjoint_eq_symm_of {U : (i : Œπ) ‚Üí Matrix.unitaryGroup (p i) ‚ÑÇ}
  (hU : piInnerAut U (Module.Dual.pi.matrixBlock œÜ) = Module.Dual.pi.matrixBlock œÜ) :
  LinearMap.adjoint (piInnerAut U).toLinearMap = (piInnerAut U).symm.toLinearMap :=
by
  apply LinearMap.ext
  intro
  apply ext_inner_left ‚ÑÇ
  intro
  simp only [LinearMap.adjoint_inner_right, StarAlgEquiv.toLinearMap_apply]
  simp only [PiLp.inner_apply (ùïú := ‚ÑÇ), StarAlgEquiv.piCongrRight_apply (R := ‚ÑÇ),
    StarAlgEquiv.piCongrRight_symm, Matrix.innerAutStarAlg_apply,
    Matrix.innerAutStarAlg_symm_apply]
  congr
  ext i
  rw [mul_assoc, QuantumSet.inner_star_left, Matrix.k, neg_zero, starAlgebra.modAut_zero,
    AlgEquiv.one_apply, QuantumSet.inner_conj_left, Matrix.k, neg_zero, zero_sub,
    ‚Üê Matrix.unitaryGroup.star_coe_eq_coe_star, star_star]
  rw [piInnerAut_apply_dualMatrix_iff] at hU
  simp_rw [modAut, sig_apply, neg_neg, Matrix.PosDef.rpow_one_eq_self,
    Matrix.PosDef.rpow_neg_one_eq_inv_self, ‚Üê hU]
  letI := (hœÜ i).matrixIsPosDef.invertible
  rw [Matrix.mul_inv_cancel_right_of_invertible]

def QuantumGraph.Real.piMat_conj_unitary
  {A : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p} (hA : QuantumGraph.Real (PiMat ‚ÑÇ Œπ p) A)
  {U : (i : Œπ) ‚Üí Matrix.unitaryGroup (p i) ‚ÑÇ}
  (hU : piInnerAut U (Module.Dual.pi.matrixBlock œÜ) = Module.Dual.pi.matrixBlock œÜ) :
  QuantumGraph.Real _ ((piInnerAut U).toLinearMap ‚àò‚Çó A ‚àò‚Çó LinearMap.adjoint (piInnerAut U).toLinearMap) :=
QuantumGraph.Real_conj_starAlgEquiv hA
  (QuantumSet.starAlgEquiv_isometry_iff_adjoint_eq_symm.mpr
    (innerAutStarAlg_adjoint_eq_symm_of hU))

noncomputable abbrev Matrix.UnitaryGroup.toEuclideanLinearEquiv {n : Type*} [Fintype n] [DecidableEq n]
  (A : ‚Ü•(Matrix.unitaryGroup n ‚ÑÇ)) :
    EuclideanSpace ‚ÑÇ n ‚âÉ‚Çó[‚ÑÇ] EuclideanSpace ‚ÑÇ n :=
Matrix.UnitaryGroup.toLinearEquiv A
theorem Matrix.UnitaryGroup.toEuclideanLinearEquiv_apply {n : Type*} [Fintype n] [DecidableEq n]
  (A : ‚Ü•(Matrix.unitaryGroup n ‚ÑÇ)) (v : EuclideanSpace ‚ÑÇ n) :
  (Matrix.UnitaryGroup.toEuclideanLinearEquiv A) v = (A : Matrix n n ‚ÑÇ) *·µ• v :=
rfl

noncomputable def Matrix.UnitaryGroup.toEuclideanLinearIsometryEquiv {n : Type*} [Fintype n] [DecidableEq n]
  (A : ‚Ü•(Matrix.unitaryGroup n ‚ÑÇ)) :
    EuclideanSpace ‚ÑÇ n ‚âÉ‚Çó·µ¢[‚ÑÇ] EuclideanSpace ‚ÑÇ n where
  toLinearEquiv := Matrix.UnitaryGroup.toEuclideanLinearEquiv A
  norm_map' x := by
    rw [toEuclideanLinearEquiv_apply]
    calc ‚Äñ((EuclideanSpace.equiv n ‚ÑÇ).symm ((A : Matrix n n ‚ÑÇ) *·µ• x) : EuclideanSpace ‚ÑÇ n)‚Äñ
        = ‚àö (RCLike.re ((star ((A : Matrix n n ‚ÑÇ) *·µ• x)) ‚¨ù·µ• ((A : Matrix n n ‚ÑÇ) *·µ• x))) := ?_
      _ = ‚àö (RCLike.re ((star x) ‚¨ù·µ• (((star (A : Matrix n n ‚ÑÇ) * (A : Matrix n n ‚ÑÇ)) *·µ• x)))) := ?_
      _ = ‚Äñx‚Äñ := ?_
    . rw [norm_eq_sqrt_inner (ùïú := ‚ÑÇ)]
      rfl
    . rw [star_mulVec, ‚Üê dotProduct_mulVec, mulVec_mulVec]
      rfl
    . rw [star_mul_self, one_mulVec, norm_eq_sqrt_inner (ùïú := ‚ÑÇ)]
      rfl

theorem Matrix.UnitaryGroup.toEuclideanLinearIsometryEquiv_apply {n : Type*} [Fintype n] [DecidableEq n]
  (A : ‚Ü•(Matrix.unitaryGroup n ‚ÑÇ)) (x : EuclideanSpace ‚ÑÇ n) :
  (Matrix.UnitaryGroup.toEuclideanLinearIsometryEquiv A) x = (A : Matrix n n ‚ÑÇ) *·µ• x :=
rfl
theorem Matrix.UnitaryGroup.toEuclideanLinearIsometryEquiv_symm_apply {n : Type*} [Fintype n] [DecidableEq n]
  (A : ‚Ü•(Matrix.unitaryGroup n ‚ÑÇ)) (x : EuclideanSpace ‚ÑÇ n) :
  (Matrix.UnitaryGroup.toEuclideanLinearIsometryEquiv A).symm x = ((A‚Åª¬π : unitaryGroup n ‚ÑÇ) : Matrix n n ‚ÑÇ) *·µ• x :=
rfl
theorem Matrix.UnitaryGroup.toEuclideanLinearIsometryEquiv_apply' {n : Type*} [Fintype n] [DecidableEq n]
  (A : ‚Ü•(Matrix.unitaryGroup n ‚ÑÇ)) (x : EuclideanSpace ‚ÑÇ n) :
  (Matrix.UnitaryGroup.toEuclideanLinearIsometryEquiv A).symm x = (A : Matrix n n ‚ÑÇ)·¥¥ *·µ• x :=
rfl

noncomputable abbrev unitaryTensorEuclidean (U : (i : Œπ) ‚Üí Matrix.unitaryGroup (p i) ‚ÑÇ) (i : Œπ √ó Œπ) :=
(euclideanSpaceTensor'.symm.trans
    ((LinearIsometryEquiv.TensorProduct.map (Matrix.UnitaryGroup.toEuclideanLinearIsometryEquiv (U i.1))
      (Matrix.UnitaryGroup.toEuclideanLinearIsometryEquiv (Matrix.unitaryGroup.conj (U i.2)))).trans
    euclideanSpaceTensor'))

omit [Fintype Œπ] [DecidableEq Œπ] in
theorem unitaryTensorEuclidean_apply {U : (i : Œπ) ‚Üí Matrix.unitaryGroup (p i) ‚ÑÇ} (i : Œπ √ó Œπ) (x : EuclideanSpace ‚ÑÇ (p i.1)) (y : EuclideanSpace ‚ÑÇ (p i.2)) :
  (unitaryTensorEuclidean U i) (euclideanSpaceTensor' (R := ‚ÑÇ) (x ‚äó‚Çú y))
    = euclideanSpaceTensor' (R := ‚ÑÇ)
      (((U i.1 : Matrix _ _ ‚ÑÇ) *·µ• x) ‚äó‚Çú ((U i.2 : Matrix _ _ ‚ÑÇ)·¥¥·µÄ *·µ• y)) :=
by
  rw [unitaryTensorEuclidean, LinearIsometryEquiv.trans_apply,
    LinearIsometryEquiv.symm_apply_apply]
  rfl

omit [Fintype Œπ] [DecidableEq Œπ] in
theorem unitaryTensorEuclidean_apply' {U : (i : Œπ) ‚Üí Matrix.unitaryGroup (p i) ‚ÑÇ} (i : Œπ √ó Œπ) (x : EuclideanSpace ‚ÑÇ (p i.1 √ó p i.2)) :
  (unitaryTensorEuclidean U i) x
    = ‚àë j : p i.1 √ó p i.2, euclideanSpaceTensor' (R := ‚ÑÇ)
      ((((U i.1 : Matrix _ _ ‚ÑÇ) *·µ• (x.prod_choose j).1) ‚äó‚Çú[‚ÑÇ] ((U i.2 : Matrix _ _ ‚ÑÇ)·¥¥·µÄ *·µ• (x.prod_choose j).2))) :=
by
  simp only [‚Üê unitaryTensorEuclidean_apply]
  rw [‚Üê map_sum, ‚Üê EuclideanSpace.prod_choose_spec]

omit [Fintype Œπ] [DecidableEq Œπ] in
theorem unitaryTensorEuclidean_symm_apply {U : (i : Œπ) ‚Üí Matrix.unitaryGroup (p i) ‚ÑÇ} (i : Œπ √ó Œπ) (x : EuclideanSpace ‚ÑÇ (p i.1)) (y : EuclideanSpace ‚ÑÇ (p i.2)) :
  (unitaryTensorEuclidean U i).symm (euclideanSpaceTensor' (R := ‚ÑÇ) (x ‚äó‚Çú y))
    = euclideanSpaceTensor' (R := ‚ÑÇ)
      (((((U i.1)·¥¥ : Matrix _ _ ‚ÑÇ) *·µ• x)
        ‚äó‚Çú (((U i.2)·µÄ : Matrix _ _ ‚ÑÇ) *·µ• y))) :=
by
  simp_rw [unitaryTensorEuclidean, LinearIsometryEquiv.symm_trans, LinearIsometryEquiv.trans_apply,
    LinearIsometryEquiv.symm_apply_apply]
  simp only [LinearIsometryEquiv.piLpCongrRight_symm, LinearIsometryEquiv.symm_symm,
    LinearIsometryEquiv.TensorProduct.map_symm_apply, TensorProduct.map_tmul, LinearEquiv.coe_coe,
    LinearIsometryEquiv.coe_toLinearEquiv,
    PiLp_tensorEquiv_apply,
    EmbeddingLike.apply_eq_iff_eq,
    directSumTensorToFun_apply,
    Matrix.UnitaryGroup.toEuclideanLinearIsometryEquiv_symm_apply,
    Matrix.UnitaryGroup.inv_apply, Matrix.star_eq_conjTranspose, Matrix.unitaryGroup.conj_coe,
    Matrix.conj_conjTranspose]

theorem QuantumGraph.Real.PiMat_submodule_eq_submodule_iff
  {A B : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p} (hA : QuantumGraph.Real (PiMat ‚ÑÇ Œπ p) A)
    (hB : QuantumGraph.Real (PiMat ‚ÑÇ Œπ p) B) :
  (‚àÄ i, hA.PiMat_submodule i = hB.PiMat_submodule i)
    ‚Üî
  A = B :=
by
  simp_rw [Submodule.eq_iff_orthogonalProjection_eq, ‚Üê ContinuousLinearMap.coe_inj,
    QuantumGraph.Real.PiMat_submoduleOrthogonalProjection]
  simp only [StarAlgEquiv.piCongrRight_apply,
    PiMatTensorProductEquiv_apply, StarAlgEquiv.ofAlgEquiv_coe, AlgEquiv.ofLinearEquiv_apply,
    LinearMap.coe_toContinuousLinearMap, EmbeddingLike.apply_eq_iff_eq,
    ‚Üê tensorToKronecker_apply, ‚Üê directSumTensor_apply]
  simp only [‚Üê funext_iff, EmbeddingLike.apply_eq_iff_eq]

theorem Matrix.kronecker_mulVec_euclideanSpaceTensor' {n m : Type*} [Fintype n] [Fintype m]
  [DecidableEq n] [DecidableEq m] (A : Matrix n n ‚ÑÇ) (B : Matrix m m ‚ÑÇ) (x : EuclideanSpace ‚ÑÇ n)
  (y : EuclideanSpace ‚ÑÇ m) :
  (A ‚äó‚Çñ B) *·µ• ((WithLp.equiv 2 _) (euclideanSpaceTensor' (R := ‚ÑÇ) (x ‚äó‚Çú[‚ÑÇ] y)))
    = WithLp.equiv 2 _ (euclideanSpaceTensor' (R := ‚ÑÇ) ((A *·µ• x) ‚äó‚Çú (B *·µ• y))) :=
by
  ext a
  simp only [Matrix.mulVec, Matrix.dotProduct, kroneckerMap_apply, WithLp.equiv,
    euclideanSpaceTensor'_apply]

  calc
    ‚àë x_1 : n √ó m,
    A a.1 x_1.1 * B a.2 x_1.2 * (Equiv.refl (WithLp 2 (n √ó m ‚Üí ‚ÑÇ))) (euclideanSpaceTensor' (R:=‚ÑÇ) (x ‚äó‚Çú[‚ÑÇ] y)) x_1
      = ‚àë x_1, A a.1 x_1.1 * B a.2 x_1.2 * ((euclideanSpaceTensor' (R := ‚ÑÇ) (x ‚äó‚Çú[‚ÑÇ] y)) x_1) := rfl
    _ = ‚àë x_1 : n √ó m, A a.1 x_1.1 * B a.2 x_1.2 * (x x_1.1 * y x_1.2) := by simp only [euclideanSpaceTensor'_apply]
    _ = (euclideanSpaceTensor' (R := ‚ÑÇ) ((A *·µ• x) ‚äó‚Çú[‚ÑÇ] (B *·µ• y))) a := ?_
    _ = (Equiv.refl (WithLp 2 (n √ó m ‚Üí ‚ÑÇ))) (euclideanSpaceTensor' (R := ‚ÑÇ) ((A *·µ• x) ‚äó‚Çú[‚ÑÇ] (B *·µ• y))) a := rfl
  rw [euclideanSpaceTensor'_apply]
  simp_rw [mulVec, dotProduct, Finset.sum_mul, Finset.mul_sum, Finset.sum_product_univ, mul_assoc]
  congr; ext; congr; ext
  ring_nf

theorem StarAlgEquiv.piCongrRight_apply_includeBlock {Œπ : Type*}
  {p : Œπ ‚Üí Type*} [‚àÄ i, Fintype (p i)] [DecidableEq Œπ]
  (f : Œ† i, Matrix (p i) (p i) ‚ÑÇ ‚âÉ‚ãÜ‚Çê[‚ÑÇ] Matrix (p i) (p i) ‚ÑÇ)
  (i : Œπ) (x : Matrix (p i) (p i) ‚ÑÇ) :
  (StarAlgEquiv.piCongrRight (Œª a => f a)) (Matrix.includeBlock x)
    = Matrix.includeBlock ((f i) x) :=
by
  ext
  simp only [piCongrRight_apply, Matrix.includeBlock_apply]
  aesop

theorem Matrix.mul_vecMulVec {n m R : Type*} [Fintype m] [Semiring R]
  (A : Matrix n m R) (x : m ‚Üí R) (y : n ‚Üí R) :
  A * (vecMulVec x y) = vecMulVec (A *·µ• x) y :=
by
  ext
  simp only [mul_apply, vecMulVec_apply, mulVec, dotProduct, Finset.sum_mul, mul_assoc]

theorem Matrix.vecMulVec_mul {n m R : Type*} [Fintype n] [CommSemiring R]
  (x : m ‚Üí R) (y : n ‚Üí R) (A : Matrix n m R) :
  (vecMulVec x y) * A = vecMulVec x (A·µÄ *·µ• y) :=
by
  ext
  simp only [mul_apply, vecMulVec_apply, mulVec, dotProduct, Finset.mul_sum, mul_assoc,
    Matrix.transpose_apply]
  simp_rw [mul_comm]

theorem Matrix.innerAutStarAlg_apply_vecMulVec {n ùïú : Type*} [Fintype n] [Field ùïú] [StarRing ùïú]
  [DecidableEq n] (U : ‚Ü•(Matrix.unitaryGroup n ùïú)) (x y : n ‚Üí ùïú) :
  (Matrix.innerAutStarAlg U) (vecMulVec x y) = vecMulVec (U *·µ• x) (U·¥¥·µÄ *·µ• y) :=
by
  simp only [innerAutStarAlg_apply, unitary.coe_star, mul_vecMulVec, vecMulVec_mul,
    star_eq_conjTranspose]
  rfl
theorem Matrix.innerAutStarAlg_apply_vecMulVec_star {n ùïú : Type*} [Fintype n] [Field ùïú] [StarRing ùïú]
  [DecidableEq n] (U : ‚Ü•(Matrix.unitaryGroup n ùïú)) (x y : n ‚Üí ùïú) :
  (Matrix.innerAutStarAlg U) (vecMulVec x (star y))
    = vecMulVec (U *·µ• x) (star (U *·µ• y)) :=
by
  simp only [innerAutStarAlg_apply, unitary.coe_star, mul_vecMulVec, vecMulVec_mul,
    star_eq_conjTranspose, star_mulVec, conj]
  simp_rw [‚Üê vecMul_transpose]
  rfl
theorem Matrix.innerAutStarAlg_apply_star_vecMulVec {n ùïú : Type*} [Fintype n] [Field ùïú] [StarRing ùïú]
  [DecidableEq n] (U : ‚Ü•(Matrix.unitaryGroup n ùïú)) (x y : n ‚Üí ùïú) :
  (Matrix.innerAutStarAlg U) (vecMulVec (star x) y)
    = (vecMulVec (U·¥¥·µÄ *·µ• x) (star (U·¥¥·µÄ *·µ• y)))·¥¥·µÄ :=
by
  rw [innerAutStarAlg_apply_vecMulVec, vecMulVec_conj, star_star, star_mulVec]
  rw [‚Üê vecMul_transpose, conj_conjTranspose]

theorem Matrix.PosSemidef.eq_iff_sq_eq_sq {n ùïú : Type*} [Fintype n] [RCLike ùïú]
  [DecidableEq n] {A : Matrix n n ùïú} (hA : A.PosSemidef) {B : Matrix n n ùïú}
  (hB : B.PosSemidef) :
    A ^ 2 = B ^ 2 ‚Üî A = B :=
‚ü®Œª h => hA.eq_of_sq_eq_sq hB h, Œª h => by rw [h]‚ü©

omit [Fintype Œπ] [DecidableEq Œπ] in
theorem innerAutStarAlg_apply_dualMatrix_eq_iff_eq_sqrt {i : Œπ}
  (U : Matrix.unitaryGroup (p i) ‚ÑÇ) :
  (Matrix.innerAutStarAlg U) (œÜ i).matrix = (œÜ i).matrix
    ‚Üî (Matrix.innerAutStarAlg U) ((hœÜ i).matrixIsPosDef.rpow (1 / 2))
      = (hœÜ i).matrixIsPosDef.rpow (1 / 2) :=
by
  simp_rw [Matrix.innerAutStarAlg_apply_eq_innerAut_apply]
  rw [‚Üê Matrix.PosSemidef.eq_iff_sq_eq_sq (Matrix.PosDef.innerAut
      (Matrix.PosDef.rpow.isPosDef _ _) _).posSemidef
      (Matrix.PosDef.rpow.isPosDef _ _).posSemidef,
    Matrix.innerAut.map_pow]
  simp_rw [pow_two, Matrix.PosDef.rpow_mul_rpow, add_halves, Matrix.PosDef.rpow_one_eq_self]

omit [DecidableEq _] in
theorem PiMat.modAut {r : ‚Ñù} :
  (modAut r : PiMat ‚ÑÇ Œπ p ‚âÉ‚Çê[‚ÑÇ] PiMat ‚ÑÇ Œπ p) =
    AlgEquiv.piCongrRight (Œª _ => modAut r) :=
rfl

theorem Matrix.counit_eq_dual {n : Type*} [Fintype n] [DecidableEq n]
  {œÜ : Module.Dual ‚ÑÇ (Matrix n n ‚ÑÇ)} [œÜ.IsFaithfulPosMap] :
  Coalgebra.counit (R := ‚ÑÇ) (A := Matrix n n ‚ÑÇ) = œÜ :=
by
  ext
  simp only [‚Üê Coalgebra.inner_eq_counit']
  rw [@Module.Dual.IsFaithfulPosMap.inner_eq, conjTranspose_one, one_mul]

theorem PiMat.counit_eq_dual :
  (Coalgebra.counit (R := ‚ÑÇ) (A := PiMat ‚ÑÇ Œπ p)) = Module.Dual.pi œÜ :=
by
  apply LinearMap.ext
  intro
  simp only [‚Üê Coalgebra.inner_eq_counit']
  rw [Module.Dual.pi.IsFaithfulPosMap.inner_eq, star_one, one_mul]

theorem modAut_eq_id_iff (r : ‚Ñù) :
    (modAut r : PiMat ‚ÑÇ Œπ p ‚âÉ‚Çê[‚ÑÇ] PiMat ‚ÑÇ Œπ p) = 1
      ‚Üî r = 0 ‚à® Module.Dual.IsTracial (Coalgebra.counit (R := ‚ÑÇ) (A := PiMat ‚ÑÇ Œπ p)) :=
by
  rw [PiMat.counit_eq_dual]
  calc (modAut r : PiMat ‚ÑÇ Œπ p ‚âÉ‚Çê[‚ÑÇ] PiMat ‚ÑÇ Œπ p) = 1
      ‚Üî ‚àÄ i, (modAut r : Mat ‚ÑÇ (p i) ‚âÉ‚Çê[‚ÑÇ] Mat ‚ÑÇ (p i)) = 1 :=
      by
        simp [PiMat.modAut, AlgEquiv.ext_iff, funext_iff]
        refine ‚ü®Œª h i a => ?_, Œª h a i => h i (a i)‚ü©
        simpa only [Matrix.includeBlock_apply_same] using h (Matrix.includeBlock a) i
    _ ‚Üî ‚àÄ i, sig (hœÜ i) r = 1 := by simp only [modAut]
  simp_rw [sig_eq_id_iff, forall_or_left, Module.Dual.pi_isTracial_iff]

theorem unitary.mul_inj {A : Type*} [Monoid A] [StarMul A] (U : ‚Ü•(unitary A)) (x y : A) :
  ‚ÜëU * x = ‚ÜëU * y ‚Üî x = y :=
by
  rw [‚Üê unitary.val_toUnits_apply]
  exact (Units.mul_right_inj (toUnits U))

omit [DecidableEq _] in
theorem piInnerAut_modAut_commutes_of {U : (i : Œπ) ‚Üí Matrix.unitaryGroup (p i) ‚ÑÇ} {r : ‚Ñù}
  (h : ‚àÄ i, (Matrix.innerAutStarAlg (U i)) ((hœÜ i).matrixIsPosDef.rpow r)
      = (hœÜ i).matrixIsPosDef.rpow r) :
  ‚àÄ x, (piInnerAut U) ((modAut (-r)) x) = (modAut (-r)) ((piInnerAut U) x) :=
by
  simp only [funext_iff, Function.comp_apply, piInnerAut,
    PiMat.modAut, StarAlgEquiv.piCongrRight_apply, AlgEquiv.piCongrRight_apply,
    modAut, sig_apply, Matrix.innerAutStarAlg_apply', unitary.mul_inv_eq_iff] at h ‚ä¢
  simp only [mul_assoc, neg_neg]
  simp only [Matrix.PosDef.rpow_neg_eq_inv_rpow, inv_inv]
  simp only [‚Üê unitary.star_eq_inv, unitary.coe_star, ‚Üê mul_assoc, ‚Üê h]
  intro _ i
  letI := (Matrix.PosDef.rpow.isPosDef (hœÜ i).matrixIsPosDef r).invertible
  simp only [mul_assoc, unitary.mul_inj, Matrix.mul_right_inj_of_invertible]
  rw [Matrix.mul_inv_eq_iff_eq_mul_of_invertible]
  simp only [mul_assoc, h]
  simp only [Matrix.inv_mul_cancel_left_of_invertible, unitary.coe_star_mul_self, mul_one]

theorem QuantumGraph.Real.PiMat_applyConjInnerAut
  {A : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p} (hA : QuantumGraph.Real (PiMat ‚ÑÇ Œπ p) A)
  {U : (i : Œπ) ‚Üí Matrix.unitaryGroup (p i) ‚ÑÇ}
  (hU : piInnerAut U (Module.Dual.pi.matrixBlock œÜ) = Module.Dual.pi.matrixBlock œÜ) :
  let S : (i : Œπ √ó Œπ) ‚Üí
    (j : (Fin (Module.finrank ‚ÑÇ (hA.PiMat_submodule i))))
      ‚Üí (((p i.1) √ó (p i.2)) ‚Üí (((EuclideanSpace ‚ÑÇ (p i.1)) √ó (EuclideanSpace ‚ÑÇ (p i.2)))))
    := Œª i j => (hA.PiMat_orthonormalBasis i j : EuclideanSpace ‚ÑÇ _).prod_choose
  (piInnerAut U).toLinearMap ‚àò‚Çó A ‚àò‚Çó LinearMap.adjoint (piInnerAut U).toLinearMap
    = ‚àë i : Œπ √ó Œπ, ‚àë j, ‚àë s : (p i.1 √ó p i.2), ‚àë l : (p i.1 √ó p i.2),
    rankOne ‚ÑÇ (Matrix.includeBlock
      (Matrix.vecMulVec ((U i.1 : Matrix (p i.1) (p i.1) ‚ÑÇ) *·µ• (S i j s).1)
        (star ((U i.1 : Matrix (p i.1) (p i.1) ‚ÑÇ) *·µ• (S i j l).1))))
      (modAut (- (1 / 2)) (Matrix.includeBlock
        ((Matrix.vecMulVec ((U i.2 : Matrix (p i.2) (p i.2) ‚ÑÇ)·¥¥·µÄ *·µ• (S i j s).2)
          (star ((U i.2 : Matrix (p i.2) (p i.2) ‚ÑÇ)·¥¥·µÄ *·µ• (S i j l).2)))·¥¥·µÄ)))
     :=
by
  intro S
  simp_rw [piInnerAut_apply_dualMatrix_iff', innerAutStarAlg_apply_dualMatrix_eq_iff_eq_sqrt] at hU
  have hU‚ÇÇ := piInnerAut_modAut_commutes_of hU
  nth_rw 1 [QuantumGraph.Real.PiMat_eq hA]
  simp only [piInnerAut] at hU‚ÇÇ ‚ä¢
  simp only [ContinuousLinearMap.coe_sum, LinearMap.sum_comp, LinearMap.comp_sum,
    LinearMap.rankOne_comp', LinearMap.comp_rankOne, StarAlgEquiv.toLinearMap_apply, hU‚ÇÇ]
  repeat apply Finset.sum_congr rfl; intro _ _
  congr 2
  . rw [StarAlgEquiv.piCongrRight_apply_includeBlock, Matrix.innerAutStarAlg_apply_vecMulVec_star]
  . rw [StarAlgEquiv.piCongrRight_apply_includeBlock, Matrix.vecMulVec_conj, star_star,
    Matrix.innerAutStarAlg_apply_star_vecMulVec]

open QuantumSet in
set_option synthInstance.maxHeartbeats 0 in
set_option maxHeartbeats 0 in
set_option maxRecDepth 1000 in
theorem QuantumGraph.Real.PiMat_conj_unitary_submodule_eq_map
  {A : PiMat ‚ÑÇ Œπ p ‚Üí‚Çó[‚ÑÇ] PiMat ‚ÑÇ Œπ p} (hA : QuantumGraph.Real (PiMat ‚ÑÇ Œπ p) A)
  {U : (i : Œπ) ‚Üí Matrix.unitaryGroup (p i) ‚ÑÇ}
  (hU : piInnerAut U (Module.Dual.pi.matrixBlock œÜ) = Module.Dual.pi.matrixBlock œÜ) (i : Œπ √ó Œπ) :
  QuantumGraph.Real.PiMat_submodule (hA.piMat_conj_unitary hU) i
    = Submodule.map (unitaryTensorEuclidean U i) (hA.PiMat_submodule i)
     :=
by
  rw [Submodule.eq_iff_orthogonalProjection_eq, ‚Üê ContinuousLinearMap.coe_inj]
  rw [orthogonalProjection_submoduleMap]
  nth_rw 1 [OrthonormalBasis.orthogonalProjection'_eq_sum_rankOne (hA.PiMat_orthonormalBasis i)]
  simp_rw [QuantumGraph.Real.PiMat_submoduleOrthogonalProjection]
  rw [QuantumGraph.Real.PiMat_applyConjInnerAut hA hU]
  simp only [ContinuousLinearMap.coe_sum, map_sum, Psi_apply, Psi_toFun_apply,
    Finset.sum_apply, StarAlgEquiv.lTensor_tmul, PiMatTensorProductEquiv_tmul,
    TensorProduct.map_tmul, PiMat_toEuclideanLM, StarAlgEquiv.piCongrRight_apply]
  simp only [LinearMap.sum_comp, LinearMap.comp_sum]
  simp only [modAut_apply_modAut, add_neg_cancel, starAlgebra.modAut_zero, AlgEquiv.one_apply,
    PiMat.transposeStarAlgEquiv_symm_apply, MulOpposite.unop_op]
  simp only [LinearMap.comp_rankOne, LinearMap.rankOne_comp, LinearIsometryEquiv.linearMap_adjoint,
    LinearIsometryEquiv.symm_symm]
  simp only [LinearIsometryEquiv.coe_toLinearEquiv, LinearEquiv.coe_toLinearMap,
    LinearMap.coe_toContinuousLinearMap, unitaryTensorEuclidean_apply', EuclideanSpaceTensor_apply_eq_reshape_vecMulVec]
  simp only [Matrix.reshape_aux_star, Matrix.includeBlock_apply, Matrix.dite_kronecker, Pi.star_apply,
    star_dite, star_zero, apply_dite, Matrix.kronecker_dite, Matrix.transpose_zero,
    map_zero, Matrix.kronecker_zero]
  simp only [Finset.sum_dite_irrel, Finset.sum_const_zero, Finset.sum_product_univ,
    Finset.sum_dite_eq', Finset.sum_dite_eq, Finset.mem_univ, if_true]
  simp only [
    eq_mp_eq_cast, cast_eq,
    Matrix.star_eq_conjTranspose, Matrix.conj_conjTranspose, Matrix.transpose_conj_eq_conjTranspose,
    Matrix.transpose_transpose, Matrix.vecMulVec_kronecker_vecMulVec,
    Matrix.toEuclideanStarAlgEquiv_coe, Matrix.vecMulVec_toEuclideanLin]
  congr
  ext
  nth_rw 3 [‚Üê Finset.sum_product']
  nth_rw 2 [‚Üê Finset.sum_product']
  simp only [Finset.univ_product_univ, rankOne_lm_sum_sum]
  simp only [Finset.sum_product_univ, Matrix.reshape_aux_star (R := ‚ÑÇ),
    Matrix.vecMulVec_conj, star_star]
